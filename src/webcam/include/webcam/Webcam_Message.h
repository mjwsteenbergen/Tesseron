// Generated by gencpp from file webcam/Webcam_Message.msg
// DO NOT EDIT!


#ifndef WEBCAM_MESSAGE_WEBCAM_MESSAGE_H
#define WEBCAM_MESSAGE_WEBCAM_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <webcam/Tile_Message.h>
#include <webcam/Tile_Message.h>

namespace webcam
{
template <class ContainerAllocator>
struct Webcam_Message_
{
  typedef Webcam_Message_<ContainerAllocator> Type;

  Webcam_Message_()
    : up()
    , left()  {
    }
  Webcam_Message_(const ContainerAllocator& _alloc)
    : up(_alloc)
    , left(_alloc)  {
    }



   typedef  ::webcam::Tile_Message_<ContainerAllocator>  _up_type;
  _up_type up;

   typedef  ::webcam::Tile_Message_<ContainerAllocator>  _left_type;
  _left_type left;




  typedef boost::shared_ptr< ::webcam::Webcam_Message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::webcam::Webcam_Message_<ContainerAllocator> const> ConstPtr;

}; // struct Webcam_Message_

typedef ::webcam::Webcam_Message_<std::allocator<void> > Webcam_Message;

typedef boost::shared_ptr< ::webcam::Webcam_Message > Webcam_MessagePtr;
typedef boost::shared_ptr< ::webcam::Webcam_Message const> Webcam_MessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::webcam::Webcam_Message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::webcam::Webcam_Message_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace webcam

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'webcam': ['/home/sanderkempen/Coding/Tesseron/src/webcam/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::webcam::Webcam_Message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::webcam::Webcam_Message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::webcam::Webcam_Message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::webcam::Webcam_Message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::webcam::Webcam_Message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::webcam::Webcam_Message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::webcam::Webcam_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1d18d90e75db80f3434d13457a2e638";
  }

  static const char* value(const ::webcam::Webcam_Message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1d18d90e75db80fULL;
  static const uint64_t static_value2 = 0x3434d13457a2e638ULL;
};

template<class ContainerAllocator>
struct DataType< ::webcam::Webcam_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "webcam/Webcam_Message";
  }

  static const char* value(const ::webcam::Webcam_Message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::webcam::Webcam_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Tile_Message up\n\
Tile_Message left\n\
\n\
================================================================================\n\
MSG: webcam/Tile_Message\n\
int32 x\n\
int32 y\n\
int32 color\n\
";
  }

  static const char* value(const ::webcam::Webcam_Message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::webcam::Webcam_Message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.up);
      stream.next(m.left);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Webcam_Message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::webcam::Webcam_Message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::webcam::Webcam_Message_<ContainerAllocator>& v)
  {
    s << indent << "up: ";
    s << std::endl;
    Printer< ::webcam::Tile_Message_<ContainerAllocator> >::stream(s, indent + "  ", v.up);
    s << indent << "left: ";
    s << std::endl;
    Printer< ::webcam::Tile_Message_<ContainerAllocator> >::stream(s, indent + "  ", v.left);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WEBCAM_MESSAGE_WEBCAM_MESSAGE_H
